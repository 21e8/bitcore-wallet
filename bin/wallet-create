#!/usr/bin/env node

var _ = require('lodash');
var program = require('commander');
var utils = require('./cli-utils');
program = utils.configureCommander(program);

program
  .option('-t, --testnet', 'Create a Testnet Wallet')
  .option('-p, --password', 'Encrypt wallet. Will ask password interactively')
  .option('-f, --file <file>', 'Wallet file to be created, overriding the default creation file name (~/.wallet.dat)')
  .usage('[options] <walletName> <m-n> [copayerName] <passphrase>')
  .parse(process.argv);

var args = program.args;
/*
   For all wallet types, we will always create a HD key pair. The extended private key will be encrypted with a passphrase.
   The extended public key will be hashed and used as the walletId. Optionally there can be a wallet name as well.
*/

if (!args[0]) {
  program.help();
}

var walletName = args[0];
var copayerName = args[2] || process.env.USER;
var passphrase = args[3];
var network = program.testnet ? 'testnet' : 'livenet';

var mn;
try {
  mn = utils.parseMN(args[1]);
} catch (ex) {
  utils.die(ex);
}

utils.getClient(program, {
  doNotComplete: true
}, function(client) {
  client.seedFromRandomWithMnemonic({
    network: network,
    passphrase: passphrase,
    language: 'en',
  });
  client.createWallet(walletName, copayerName, mn[0], mn[1], {
    network: network
  }, function(err, secret) {
    utils.die(err);
    console.log(' * ' + _.capitalize(network) + ' Wallet Created.');
    utils.saveClient(program, client, function() {
      if (secret) {
        console.log('   - Secret to share:\n\t' + secret);
      }
    });
  });
});

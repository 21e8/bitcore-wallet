#!/usr/bin/env node

var program = require('commander');
var http = require('http');
var https = require('https');
var fs = require('fs');
var url = require('url');

function isTLS(url) {
  return url.protocol === 'https:';
}

program
  .option('-u, --url <url>', 'Server url to register with')
  .usage('[options] e.g. wallet-utxos -u https://example.com/wallet-api <walletId> <output file or stdout>')
  .parse(process.argv);

function writeOutputFile(file, data, callback) {
  fs.open(file, 'wx', function(err, fd) {
    if (err) {
      return callback(err);
    }
    fs.write(fd, data, function(err) {
      if(err) {
        return callback(err);
      }
      callback();
    });
  });
}

var args = program.args;
if (!args[0]) {
  program.help();
} else if (args[1] && fs.existsSync(args[1])) {
  console.error('Output file: "' + args[1] + '" already exists, not over-writing, aborting.');
  process.exit(-1);
}

var walletId = args[0];
var urlStr = program.url || 'https://localhost:3001/wallet-api';

function getUtxos(walletId, callback) {
  var parsedUrl = url.parse(urlStr);
  var httpOptions = {
    protocol: parsedUrl.protocol,
    hostname: parsedUrl.hostname,
    port: (parsedUrl.port || isTLS(parsedUrl) ? 443 : 80),
    method: 'GET',
    url: urlStr,
    path: '/wallets/' + walletId + '/utxos',
    body: ''
  };
  var error;
  var req = (isTLS(parsedUrl) ? https : http).request(httpOptions, function(res) {

    function finish(err, body) {
      if (err) {
        return callback(err);
      }
      if (res.statusCode < 200 || res.statusCode > 299) {
        return callback(new Error('Response code from server was ' + res.statusCode));
      }
      var json;
      if (body) {
        try {
          json = JSON.parse(body);
        } catch(e) {
          return callback(e);
        }
        if (body.utxos) {
          callback(null, body.utxos);
        } else {
          callback(new Error('Response json not as expected - no utxos key in reply: ' + body));
        }
      }
      callback(new Error('no body in response.'));
    }

    var body = '';
    res.on('data', function(chunk) {
      body += chunk;
    });

    res.on('end', function() {
      finish(error, body);
    });

  });

  req.on('error', function(e) {
    error = e;
  });

  req.write('');
  req.end();
}

getUtxos(walletId, function(err, utxos) {
  if(err) {
    throw err;
  }
  if (args[1]) {
    writeOutputFile(args[1], utxos, function(err) {
      if(err) {
        throw err;
      }
      console.log('Utxos written to ' + args[1] + ' for walletId: ' + walletId);
    });
  } else {
    setImmediate(function() {
      process.stdout.write(utxos);
    });
  }
});


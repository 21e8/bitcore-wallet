#!/usr/bin/env node

var program = require('commander');
var utils = require('./cli-utils');
var bitcore = require('bitcore-lib');
var fs = require('fs');
var async = require('async');
var _ = require('lodash');

program = utils.configureCommander(program);
program
  .option('-s, --maxtxsize <maxtxsize>', 'Maximum Transaction Size in bytes, default 100 kB')
  .option('-a, --maxsatoshis <maxsatoshis>', 'Maximum Satoshis, default 50 BTC')
  .usage('wallet-create-transactions <utxo file> <to addresses> <tx output file or stdout>, e.g. wallet-create-transaction utxos.json "n4DGvX1nG8iXkfemtsyBVbb7gsZXKZtuFU, 2MzVfCRT3J48nCAySjbGP8QsjbvirbJcAh2" tx.hex')
  .parse(process.argv);

function writeOutputFile(file, data, callback) {
  fs.open(file, 'wx', function(err, fd) {
    if (err) {
      return callback(err);
    }
    fs.write(fd, data, function(err) {
      if(err) {
        return callback(err);
      }
      callback();
    });
  });
}

var args = program.args;
var maxTxSize = program.maxtxsize || 1E5;
var maxSatoshis = program.maxsatoshis || 50 * 1E8;

if (!args[0] || !args[1] || (args[2] && !fs.existsSync(args[2]))) {
  program.help();
}

//TODO handle utxos that are P2SH and others
function computeInputSize(utxo) {
  //every input is > 40 bytes, 36 bytes for prev out and 4 bytes for nSequence + scriptSig + var_int for length of scriptSig
  var scriptSigLen = utxo.scriptPubKey.length
  var varIntLen; //varIntLen > 1, then varIntLen is serialized LE
  if (scriptSigLen < 0xFD) {
    varIntLen = 1;
  } else if (scriptSigLen <= 0xFFFF) {
    varIntLen = 3;
  } else if (scriptSigLen <= 0xFFFFFFFF) {
    varIntLen = 5;
  } else {
    varIntLen = 9;
  }
  var ret = 40 + scriptSigLen + varIntLen;
  utxo.inputSize = ret;
 return ret;
}

function sort(utxos) {
  // sort by input size then amount
  return _.sortBy(utxos, [function(utxo) {
    utxo.inputSize = computeInputSize(utxo);
    return utxo.inputSize;
  }, function(utxo) {
    return utxo.satoshis;
  }]);
}

var utxoFile = args[0];
var utxos = sort(require(utxoFile));

function createTransaction(utxoFile, callback) {
  var utxosToSend = [];
  var runningSize = 0;
  var runningSatoshis = 0;
  for(var i = 0; i < utxos.length; i++) {
    if (utxos[i].satoshis + runningSatoshis > maxSatoshis ||
      utxos[i]
  }

}

createTransaction(utxoFile, function(err, utxos) {
  if(err) {
    throw err;
  }
  if (args[1]) {
    writeOutputFile(args[1], utxos, function(err) {
      if(err) {
        throw err;
      }
      console.log('Utxos written to ' + args[1] + ' for walletId: ' + walletId);
    });
  } else {
    setImmediate(function() {
      process.stdout.write(utxos);
    });
  }
});



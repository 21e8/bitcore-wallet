#!/usr/bin/env node

/*
input file format:
{ utxos: [ { txid: <txid>, vout: <int>, satoshis: <int>, scriptPubKey: <hex> }, ... ],
  addresses: [ { address: <address>, satoshis: <OPTIONAL int>, changeAddress: <bool> }, ... ] }
*/
var program = require('commander');
var bitcore = require('bitcore-lib');
var https = require('https');
var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var async = require('async');

var inputFileFormat = '{ utxos: [ { txid: <txid>, vout: <int>, satoshis: <int>, scriptPubKey: <hex> }, ... ],\n' +
'addresses: [ { address: <addresses>, satoshis: <OPTIONAL int>, changeAddress: <bool> }, ... ] }';

program
  .option('-s, --maxtxsize <maxtxsize>', 'Maximum Transaction Size in bytes, default 100 kB (100,000 bytes)')
  .option('-a, --maxamount <maxamount>', 'Maximum BTC Amount, default 50 BTC')
  .option('-f, --feeperbyte <feeperbyte>', 'Specify a fee per byte')
  .option('-p, --priority <priority>', 'Generally equates how quickly this transaction could be confirmed. 1-3, with 1 being the highest priority')
  .usage('<input file> <tx output file or stdout>, e.g. wallet-create-transaction input.json tx.hex\n\nInput file format ' +
  inputFileFormat + '\n\n\n' + fs.readFileSync(__dirname + '/../TransactionRules.txt'))
  .parse(process.argv);

var BitcoreWalletTransaction = function(options) {
  this.program = options.program;
  this.args = this.program.args;
  this._processArgs();
  this.inputFile = path.resolve(__dirname, '../' + this.args[0]);
  this.outputFile = this.args[1];
  this.maxTxSize = this.program.maxtxsize || 1E5;
  this.feeperbyte = this.program.feeperbyte;
  this.signatureByteLength = 72; //this is worst case size, actual size could be -2 byte
  this.priority = this.program.priority;
  this._21FeesUrl = 'https://bitcoinfees.21.co/api/v1/fees/recommended';
  this.insightFeesUrl = 'https://insight.bitpay.com/api/utils/estimateFee?nbBlocks=2,3,4';
  this.outputAmount = 0;
};

BitcoreWalletTransaction.prototype._setUtxoAmounts = function() {
  for(var i = 0; i < this.utxos.length; i++) {
    this.utxos[i].satoshis = this.utxos[i].satoshis || this._convertBTCToSat(this.utxos[i].amount);
  }
};

BitcoreWalletTransaction.prototype._filterUtxos = function() {
  var self = this;
  this.utxos = _.filter(this.utxos, function(utxo) {
    return utxo.satoshis <= self.maxSatoshis && self._isP2PKH(utxo);
  });
};

BitcoreWalletTransaction.prototype._sortUtxos = function() {
  this.utxos = _.sortBy(this.utxos, 'satoshis').reverse();
};

BitcoreWalletTransaction.prototype._setOutputAmounts = function() {
  for(var i = 0; i < this._addresses.length; i++) {
    var address = this._addresses[i];
    if (!address.changeAddress) {
      if (address.amount) {
        address.satoshis = this._convertBTCToSat(address.amount);
      }
      this.outputAmount += address.satoshis;
    }
  }
  if (this.program.maxAmount) {
    this.maxSatoshis = this._convertBTCToSat(this.program.maxAmount);
  } else {
    this.maxSatoshis = this._convertBTCToSat(50);
  }
};

BitcoreWalletTransaction.prototype._processArgs = function() {
  if (!this.args[0]) {
    this.program.help();
  } else if (this.args[1] && fs.existsSync(this.args[1])) {
    console.error('Output file: "' + this.args[1] + '" already exists, not over-writing, aborting.');
    process.exit(-1);
  }
};

BitcoreWalletTransaction.prototype._setInputInformation = function() {
  //letting this throw if needed
  var inputInfo = require(this.inputFile);
  this._addresses = inputInfo.addresses;
  this.utxos = inputInfo.utxos;
};

BitcoreWalletTransaction.prototype._performSanityChecks = function() {
  var notGood = !this.utxos ||
                this.utxos.length === 0 ||
               !this._addresses ||
               this._addresses.length === 0 ||
               !this._sufficientInputs();
  if (notGood) {
    throw 'Inputs amounts cannot satify the output amounts.';
  }
};

BitcoreWalletTransaction.prototype._sufficientInputs = function() {
  var outAmount = 0;
  for(var i = 0; i < this._addresses.length; i++) {
    outAmount += this._addresses[i].satoshis || 0;
  }
  //user did not set output therefore any inputs will satisfy
  if (outAmount === 0) {
    return true;
  }
  var inAmount = 0;
  for(var j = 0; j < this.utxos.length; j++) {
    inAmount += this.utxos[i].satoshis || 0;
  }
  //this is just a sanity check and won't factor in a fee
  if (inAmount > outAmount) {
    return true;
  }
  return false;
};

BitcoreWalletTransaction.prototype._writeOutputFile = function(callback) {
  var data = JSON.stringify({ tx: this.tx.uncheckedSerialize() });
  if (this.outputFile) {
    fs.open(this.outputFile, 'wx', function(err, fd) {
      if (err) {
        return callback(err);
      }
      fs.write(fd, data, function(err) {
        if(err) {
          return callback(err);
        }
        callback();
      });
    });
  } else {
    setImmediate(function() {
      process.stdout.write(data);
      callback();
    });
  }
};

BitcoreWalletTransaction.prototype._addInputs = function() {
  var utxos = [];

  //if output amounts are EXPLICITLY set, then we MUST satisfy those.
  //we must also provide a fee, these are additional inputs.
  //the above is secondary to the space requirements and the maxSatoshis contraints
  for(var i = 0; i < this.utxos.length; i++) {

    if (!this._hasInputSpace(this.utxos[i]) ||
      this._hasSurpassedMaxSatoshis(this.utxos[i]) ||
      this._hasEnoughInputsForOutputs(this.utxos[i])) {
console.log('not adding: ', i);
      continue;
    }

console.log('adding utxo: ', i);
    this.tx.from(this.utxos[i]);
  }
};

BitcoreWalletTransaction.prototype._addOutputs = function() {
  for(var i = 0; i < this._addresses.length; i++) {
    if (!this._addresses[i].changeAddress) {

      var output = this._addresses[i];
      var unsetAmountOutput = !output.changeAddress && !output.satoshis;
      if (unsetAmountOutput && this._unsetOutput) {
        throw 'Supplied output address(es) amounts are ambiguous, please check the "satoshis" field, aborting.';
      }

      if (unsetAmountOutput) {
        this._unsetOutput = true;
      }

      this.tx.to(output.address, output.satoshis);

    } else {
      if (this._changeAddressIndex >= 0) {
        throw 'multiple change addresses were given in inputs, aborting.';
      } else {
        this._changeAddressIndex = i;
      }
    }
  }
};

BitcoreWalletTransaction.prototype._isP2PKH = function(utxo) {
  var script = new bitcore.Script(utxo.scriptPubKey);
  return script.isPublicKeyHashOut();
};

BitcoreWalletTransaction.prototype._hasEnoughInputsForOutputs = function(utxo) {
  //if we add this utxo, will the sum of the inputs be equal to or less than projected fees plus the outputAmount
  //if true, then we must NOT add this utxo to the tx
  if (this.outputAmount === 0) {
    return false; //this means the user did not set the output amount. This Tx is a sweep where the output amounts are not important
  }
  var txAmountWithThisUtxo = this.tx.inputAmount + utxo.satoshis;
  var ret = txAmountWithThisUtxo >= (this._calculateRunningFee(utxo) + this.outputAmount);
  return ret;
};

BitcoreWalletTransaction.prototype._hasSurpassedMaxSatoshis = function(utxo) {
  //if we add this utxo, will the sum of the input amounts be greater than or equal to the maxSatoshis
  //if true, then we must NOT add this utxo to the tx
  var txAmountWithThisUtxo = this.tx.inputAmount + utxo.satoshis;
  var ret = txAmountWithThisUtxo >= this.maxSatoshis;
  return ret;
};

BitcoreWalletTransaction.prototype._calculateRunningFee = function(utxo) {
  var runningFee = (this.tx.uncheckedSerialize().length + this._calculateSigSpace(utxo)) * this.feeperbyte;
  return runningFee;
};

BitcoreWalletTransaction.prototype._hasInputSpace = function(utxo) {
  //if we add this utxo, will the total tx size (less a change address output) be greater than or equal to the maxTxSize
  //if true, then we must NOT add this utxo to the tx
  var ret = (this.tx.uncheckedSerialize().length + this._calculateSigSpace(utxo)) <= this.maxTxSize;
  return ret;
};

BitcoreWalletTransaction.prototype._calculateSigSpace = function(utxo) {
  return (this.tx.inputs.length + 1) * this.signatureByteLength;
};

BitcoreWalletTransaction.prototype._setFee = function() {
  this.tx.fee(this.tx.uncheckedSerialize().length * this.feeperbyte);
};

BitcoreWalletTransaction.prototype._getRemoteData = function(url, callback) {
  var self = this;
  var data = '';
  var req = https.request(url, function(res) {
    var error;
    res.on('data', function(chunk) {
      data += chunk;
    });
    res.on('error', function(err) {
      error = err;
    });
    res.on('end', function() {
      if (error) {
        return callback(err);
      }
      var parsedObj;
      try {
        parsedObj = JSON.parse(data);
      } catch(e) {
        return callback(e);
      }
      callback(null, parsedObj);
    });
  });
  req.write('');
  req.end();
};

BitcoreWalletTransaction.prototype._getFeePerByte = function(callback) {
  var self = this;
  if (self.feeperbyte >= 0) {
    return setImmediate(function() {
      callback(null, self.feeperbyte);
    });
  }
  async.map([this._21FeesUrl, this.insightFeesUrl], function(url, next) {
    self._getRemoteData(url, next);
  }, function(err, res) {
    if (!res[0] && !res[1]) {
      return callback(err);
    }
    self._selectBestFee(res, callback);
  });
};

BitcoreWalletTransaction.prototype._selectBestFee = function(data, callback) {
  var lower = this._chooseLower(data);
  if (this.priority > 0) {
    if (lower[this.priority-1] >= 0) {
      return callback(null, lower[this.priority-1]);
    }
  }
  //we shall take the middle path here
  callback(null, lower[1]);
};

BitcoreWalletTransaction.prototype._chooseLower = function(data) {
  var res = [];
  var keys = Object.keys(data[0]);
  for(var i = 0; i < keys.length; i++) {
    var insightSatPerByte = Math.ceil(this._convertBTCToSat(data[1][(i+2).toString()]) / 1000);
    var _21SatPerByte = data[0][keys[i]];
    if (_21SatPerByte < insightSatPerByte) {
      res.push(_21SatPerByte);
    } else {
      res.push(insightSatPerByte);
    }
  }
  return res;
};

BitcoreWalletTransaction.prototype._setChangeAddress = function() {
  if (this._changeAddressIndex >= 0) {
    this.tx.change(this._addresses[this._changeAddressIndex].address);
  }
};

BitcoreWalletTransaction.prototype._getExchangeRate = function(callback) {
  var self = this;
  self._getRemoteData('https://bitpay.com/api/rates/usd', function(err, rates) {
    if(err) {
      return callback(err);
    }
    if (rates.rate) {
      self.feeInUSD = (rates.rate * self._convertSatToBTC(self.tx.getFee())).toFixed(2);
      return callback();
    }
    callback(new Error('response has no USD rate'));
  });
};

BitcoreWalletTransaction.prototype._getOutputAmounts = function() {
  var nonChangeAmount = 0;
  var changeAmount = 0;
  for(var i = 0; i < this.tx.outputs.length; i++) {
    var output = this.tx.outputs[i];
    if (this._changeAddressIndex >= 0 &&
      this._addresses[this._changeAddressIndex].address === output.script.toAddress().toString()) {
        changeAmount += output.satoshis;
    } else {
      nonChangeAmount += output.satoshis;
    }
  }
  return { changeAmount: changeAmount, nonChangeAmount: nonChangeAmount };
};

BitcoreWalletTransaction.prototype._checkAmounts = function() {
  if (this.tx.outputAmount > (this.tx.inputAmount + this.tx.getFee())) {
    //throw 'Inputs, fees and outputs did not balance during final check.';
  }
};

BitcoreWalletTransaction.prototype._createTransaction = function() {
  this.tx = new bitcore.Transaction();
};

BitcoreWalletTransaction.prototype._convertBTCToSat = function(btc) {
  return Math.ceil(btc * 1E8);
};

BitcoreWalletTransaction.prototype._convertSatToBTC = function(sats) {
  return (sats / 1E8).toFixed(8);
};

BitcoreWalletTransaction.prototype._generateStats = function() {
  var outputAmounts = this._getOutputAmounts();
  var stats = '';
  stats += 'Total BTC sent: ' + this._convertSatToBTC(this.tx.inputAmount) + '\n';
  stats += 'Number of output addresses: ' + this.tx.outputs.length + '\n';
  stats += 'BTC amount sent to non-change address(es): ' + this._convertSatToBTC(outputAmounts.nonChangeAmount) + '\n';
  stats += 'BTC amount sent to change address: ' + this._convertSatToBTC(outputAmounts.changeAmount) + '\n';
  stats += 'Number of inputs used: ' + this.tx.inputs.length + '\n';
  stats += 'Total fees in BTC: ' + this._convertSatToBTC(this.tx.getFee()) + '\n';
  stats += 'Total fees in USD: $' + this.feeInUSD + '\n';
  stats += 'Total size in bytes: ' + this.tx.uncheckedSerialize().length + '\n';
  stats += 'Fee as satoshis per byte: ' + Math.ceil(this.tx.getFee() / this.tx.uncheckedSerialize().length) + '\n';
  return stats;
};

//these are all P2PKH inputs at 147 bytes, the outputs are typically 34 bytes
//how many inputs are we going to need to satify the outputs and the fee?
//will we need a change address?

//If the user doesn't set an output amount, then things become dramatically easier, so figure this out right away

//If no output set, then we just need to worry about max size and max amount, but NO CHANGE address

//If outputs set, we need to check if we have the inputs to satisfy them and the fee, the more inputs used, the greater the fee needed. There will also be a change address needed, most likely
//If the utxos are sorted highest to lowest, this makes things cheaper
BitcoreWalletTransaction.prototype.createTransaction = function(callback) {
  var self = this;
  //set output addresses, amounts and utxos
  self._setInputInformation();
  //set the max output amount
  self._setOutputAmounts();
  //deal with utxos that have an amount field in btc
  self._setUtxoAmounts();
  //filter utxos
  self._filterUtxos();
  //perform sanity checks on the inputs/outputs
  self._performSanityChecks();
  //get fee rate
  self._getFeePerByte(function(err, feeRate) {
    if(err) {
      //try other ways of getting the fee?
      throw err;
    }
    self.feeperbyte = feeRate;
    //sort utcos, high amt to low
    self._sortUtxos();
    //create empty tx
    self._createTransaction();
    //add outputs
    self._addOutputs();
    //add inputs
    self._addInputs();
    //set fee
    self._setFee();
    //set change address output
    self._setChangeAddress();
    //check amounts
    self._checkAmounts(); //throws
    //write tx
    self._writeOutputFile(function(err) {
      if(err) {
        return callback(err);
      }
      self._getExchangeRate(function(err) {
        if(err) {
          return callback(err);
        }
        callback(null, self._generateStats());
      });
    });
  });
};

if (require.main === module) {

  var bitcoreWalletTransaction = new BitcoreWalletTransaction({
    program: program
  });

  bitcoreWalletTransaction.createTransaction(function(err, stats) {
    if(err) {
      throw err;
    }
    if (bitcoreWalletTransaction.outputFile) {
      console.log(stats);
    }
  });

}

module.exports = BitcoreWalletTransaction;

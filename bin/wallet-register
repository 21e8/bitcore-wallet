#!/usr/bin/env node

var program = require('commander');
var FormData = require('form-data');
var form = new FormData();
var utils = require('./cli-utils');
var http = require('http');
var https = require('https');
var fs = require('fs');
var url = require('url');

function isTLS(url) {
  return url.protocol === 'https:';
}

program = utils.configureCommander(program);
program
  .option('-u, --url <url>', 'Server url to register with')
  .option('-f, --file <file>', 'Wallet file to refer to when registering')
  .usage('[options] e.g. wallet-register -f wallet.json -u https://example.com/wallet-api')
  .parse(process.argv);

var args = program.args;
var walletFile = program.file || process.env.HOME + '/.wallet.dat';
var urlStr = program.url || 'https://localhost:3001/wallet-api/wallets/';

function register(callback) {
  var stream = fs.createReadStream(walletFile);
  var parsedUrl = url.parse(urlStr);
  var httpOptions = {
    protocol: parsedUrl.protocol,
    hostname: parsedUrl.hostname,
    port: (parsedUrl.port || isTLS(parsedUrl) ? 443 : 80),
    method: 'POST',
    url: urlStr,
    path: '/wallets',
    body: ''
  };
  form.append('addresses', stream, walletFile);
  var error;
  var req = (isTLS(parsedUrl) ? https : http).request(httpOptions, function(res) {

    function finish(err, body) {
      if (err) {
        return callback(err);
      }
      if (res.statusCode < 200 || res.statusCode > 299) {
        return callback(new Error('Response code from server was ' + res.statusCode));
      }
      var json;
      if (body) {
        try {
          json = JSON.parse(body);
        } catch(e) {
          return callback(e);
        }
        if (body.walletId) {
          callback(null, body.walletId);
        } else {
          callback(new Error('Response json not as expected - no walletId given in reply: ' + body));
        }
      }
      callback(new Error('no body in response.'));
    }

    var body = '';
    res.on('data', function(chunk) {
      body += chunk;
    });

    res.on('end', function() {
      finish(error, body);
    });

  });

  req.on('error', function(e) {
    error = e;
  });

  form.pipe(req);
}

register(function(err, walletId) {
  if(err) {
    throw err;
  }
  console.log('register complete. Wallet id: ' + walletId);
});
